name: 0.0.$(Build.BuildId)

# Linux based agent; all except the first step will also work on Windows
pool:
  vmImage: 'ubuntu-16.04'

# The scheduled trigger will be set in the Azure DevOps portal
trigger: none

steps:

- task: DeleteFiles@1
  inputs:
    sourceFolder: $(Agent.BuildDirectory)
    contents: \*

# Set the number of the build
- task: PowerShell@2
  displayName: Update Build Number
  inputs:
    targetType: 'inline'
    script: '$id = "$(Build.BuildId)"; $date = Get-Date -Format "yyyy.MMdd"; Write-Host "##vso[build.updatebuildnumber]$date.$id"'

# Order or renew a certificate via ACME
- task: AzurePowerShell@4
  displayName: Order or Renew Certificate
  inputs:
    azureSubscription: 'ACME Certificate Automation'
    scriptType: 'FilePath'
    scriptPath: 'New-AcmeCertificate.ps1 '
    scriptArguments: '-AcmeDirectory "$(AcmeDirectory)" -AcmeContact "$(AcmeContact)" -CertificateNames "$(CertificateNames)" -StorageContainerSASToken "$(StorageContainerSASToken)" -CloudFlareApiToken "$(CloudFlareAPIToken)"'
    errorActionPreference: 'stop'
    failOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'

# Import the certificate into Azure Key Vault
- task: AzurePowerShell@4
  displayName: Import Certificate into Key Vault
  inputs:
    azureSubscription: 'ACME Certificate Automation'
    scriptType: 'FilePath'
    scriptPath: 'Import-AcmeCertificateToKeyVault.ps1 '
    scriptArguments: '-CertificateNames "$(CertificateNames)" -KeyVaultResourceId "$(KeyVaultResourceId)"'
    errorActionPreference: 'stop'
    failOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'
  condition: "and(succeeded(), ne(variables['KeyVaultResourceId'], ''))"

# Copy intermediate certificates and publish as part of this build for inclusion. 
- task: CopyFiles@2
  inputs:
    Contents: '**/chain*.cer'
    TargetFolder: $(Build.ArtifactStagingDirectory)
    CleanTargetFolder: true
    flattenFolders: true

# Publish those intermediate certificates
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'letsEncryptCAs'
    publishLocation: 'Container'